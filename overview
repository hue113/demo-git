PART A: WORKING IN INDIVIDUAL
01-First commit
    First time set up (only once):
        git config --global user.email "huepham113@gmail.com"
        git config --global user.name "Hue Pham"

    Create git for project:
        cd <project path>
        git init

    Add a file:
        git add README.md

    Check status:
        git status
            untracked file  (means newly created file)
            modified        (means old file was modified)

    Commit a file:
        git commit -m 'Add README.md file'


02-log, show, diff
    Show commit logs/history (file, time, commit message)
        git log
    
    Show commit content
        git show <commit ID>

    Show changes of modified files (not committed yet)
        git diff    
    
    
03-Working directory, Staging area, Repository
    Working Directory/Working Tree: the area where you are currently working/ untracked area of git 
        GIT ADD: Add files from Working Tree to Stagging Area
    Staging Area (Index): the area that git starts tracking and saving changes that occur in files.
        GIT COMMIT: Commit files from Stagging Area to Repository
        Git status: show what you have in staging area
    Repository: store changes of commits log
        Local Repository: everything in .git directory (all commits)
        git ls-tree --full-tree -r HEAD
        git log
        gitk (open a GUI window that show all commits logs/history)


04-checkout, reset
    Delete changes in file in Working Tree (not in Staging Area):
        git checkout --<filename>
    Unstage a file (remove an added file in Staging Area, move it back to Working Tree):
        git reset HEAD <filename>

05-git branch, git merge
    Create a new branch & checkout:
        git checkout -b <branch-name>
        Example: git checkout -b feature/dog-class
    
    Checkout only:
        git checkout <branch-name>

    Check all available branches
        git branch 
    
    Merge committed file from a branch
        A <-- B (merge committed file in B to A)
            Example: master <-- feature/dog-class
        git checkout A      (checkout A first)
        git merge B         (From A: merge B to A)

    Delete a branch (should keep Working Tree clean)
        git branch -D <branch-name>


06-git reset
    Uncommit / Files moved back to Staging Area (green color):
        git reset --soft <commit id>
    Uncommit / Files moved back to Working Tree (red color):
        git reset --mixed <to commit>
    Uncommit / Delete any difference in file totally
        git reset --hard <to commit>

07-git revert
    Delete old commit by adding a new commit and cancelling changes    
        git revert <commit id>

08-gitignore file
    Specify files that Git should ignore (untrack)
    Should be node-modules because it's heavy and others can still npm install to run project 

09-Github (remote repository)
    Create a new remote repo on github.com
    Copy remote repo link on Github
    Add a new remote repo to local repositories:
        git remote add origin <remote repo link>
    Show list of remote repos:    
        git remote -v
    
    Push (first time):    
        git push -u origin master
    Push (not first time):
        git push
    
    Alternatives to Github: GitLab, bitbucket


10-Git credential
    Ways to save git username and password:
        git config --global credential.helper store
        git config --global credential.helper "cache --timeout=18000"
        git ssh / keychain


Part B: WORKING IN TEAM (more than 1 people working in the same project)
11-git clone, git pull
    User A wants to clone/download User B's repository to A's computer
    User A needs to do:
        Copy repository's Clone/Download link (on B's github)
        Download all commits to A's local repository by:
            git clone <remote repo link>
            (Then A will have the same git log history with B, and B is still the author of past commits (use 'git log' to check)
            (only username is different)

    User A can download all updates/new changes of B's repository by running command:
        git pull

12-Push a branch 
    After cloning the repo (in lesson11), User A was assigned a task to create Horse.js 
    What A needs to do:
        Create and Checkout to a new branch:
            git checkout -b <feature_branch>
        Then, to push to git from that branch:
            git push origin <branch_name>

